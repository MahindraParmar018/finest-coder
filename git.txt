Git - Is a version control system is a tool that helps tpo track changes in code. It is very poopular world wide, free, opensource, fast and scalable. Git is a software application in our system. (exapmle of application with sign up page, buttons, help)

Git offers Tracking the history and collaboration.

Git track history by taking screenshots of the updates.

Git Hub - Is a platform allows developers to store and manage their code using git. https://github.com. Git hub allows to upload projects private and public.(Helps in resumes)

In git hub repository are the folders which store and manage code.

FIrst creating repository and make our first commit.

Readme.md here md is mark down. readme.md stores relevent information of repo which shows the features, how to use and what in on our project. Reaadme.md file allows the useage of html tags such as <br> Or <hr> for new line or hoorizontal line.

In Commit we have to first add(engaement) and then commit(shadi)

For setting up Git - First download vs code and git base (can use git --version to clarify that the git base is properly set up or not) 

Git configuring means in which account we are going to make changes from git to github.
Git configuring (git config --global user.name "My name", git connfig --global user.email "Email", git config --list)
Their are two configuration global(Global in whole system with taht email id) and local(in specific repo with different email) 

~ this is tild which means we are talking about root directory(that we we in our main directory or folder or root directory)

Terminal commands:-
1) cd folder name (change directory)
--> Can go to other folder or come again. If we want to return back to main folde then we use (cd ..).
--> directory is a folder
--> for auto completion we can use tab
2) clear command to clear everything

3) ls command to list all files. Their are two types to files one are normal which are visible to us and another one is hideen files to watch them we use ls -a command.

4) mkdir file name(make dir or make new directory)


Git commands:- 
1) git Clone link (Cloning a repository on our local machines) Used by git clone
--> remote machines means github platforms and local machines means laptops, pc.
--> https is the easiest way to clone a repository and be done by ssh also.

2) git status (to show files status) 
--> untrack file (U) Means git is not tracking that file. New file that git doesn't yet track
--> modified (M) Changed
--> staged (Means any file we first modified then we add it. So, when we add it then it is staged)
--> unmodified (Means any file we first modified then we add it. So, when we add it then it is staged and then we commit it. So, it is unmodified)

3) git add file name or (Simply . for all the files to staged) (Add new or changed files in your working directory to  the git staging area) What is working directory it means we are currently making changes. First we have unmodified or untracked files are add(engagement stage) and thn commit(shadi stage.)

4)git commit -m"some message" (It is to record the change) It means our commit record is printed. 
--> ahead by one commit means It is implemented only on our local system and their are no changes made in remote github platform.

5) git push origin main (To upload our changes from local to remote system we use push command OR upload local repo content to remote repo)  

6) init command (Used to create a new git repo)
--> git init (Initialized empty Git repository)
--> git remote add origin link (link from remote system to local system)
--> git remote -v (To verify remote) used to know that what origin is set or which remote repository we are talking off.
--> git branch (To check branch) What is branch - Suppose their is a company which has feature1 team, feature2 team and bug fix team so this all teams will have a copy name as branch.
--> git branch -M name of new branch (TO rename a branch)
--> git push origin main (To push repo to remote system) We can use -u (to set up stream). Suppose we are working on a same project for a long time so we can use -u to make easy that we are saying that we are working all push operation on origin main. So in future we can use only git push

* Work Flow :- (Local Git)
--> Github repo
--> Clone
--> Changes
--> Add
--> Commit
--> Push

* Branch command :-
--> git branch (To check that in which branch we are)
--> git branch -M new name (To change the name of the existing branch)
--> git checkout branch name (To chnage the branch)
--> git checkout -b new branch name (To create the new branch) By, creating a newly branch the changes done in the new branch will shown in that branch only.
--> git checkout -d branch name (To delete the existing branch) So, we just can't delete a branch in which we are present to delete that we have to move to the another branch. 

* Merging Code :-
1) git diff branch name (To compare commits, branches, files and more) It shows the differences between the branches.
--> git merge branch name (To merger 2 branches)

2) Create a PR (pull request) Means it tells others about changes you have pushed to a branch on a repository on github. By pr the manager or the leading director in main branch decides to accept changes or can give review and previews. When we use pr in our remote system the merge changes does not show in our local system.
--> To make changes in our local system we use pull command.
--> git pull origin main (Used to fetch and download content from a remote repo and immediately update the local repo to match that content)

3) Resolving merge conflicts (an event that takes place when git is unable to automatically reslove differences in code between two commits) 

* Undoing Chnanges :- 
1) staged changes  (It is used when the changes are add but not commited)
--> git reset file name (This is use when we had make change inn one or two file)
--> git reset (When we had make changes in multiple files then  just we use this)

2) commited changes (For one commit)
--> git reset HEAD~1
--> We use this when we had add and commit any change. It is only for one commit. Head comes to the latest commit.

3) commited changes (For many commits)
--> git reset commit hash (We use to undo many commits at a time and it removes commit from git)
--> git reset --hard commit hash (We use hard to undo many commits at a time but it removes commit from git as well as visual studio also)

* Fork :-
--> A fork is a new repository that shares code and visibility settings with the original "up stream" repository.
--> Fork is a rough copy. Forking is just we can copy or fork any code from open source and even make changes in it and make a pull request.